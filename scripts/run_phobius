#!/usr/bin/env python3

import os
import re
import sys
import shutil
import argparse
import subprocess

DIR              = os.path.dirname(__file__)
PHOBIUS_BIN      = os.path.join(DIR, '../dependencies/phobius/phobius.pl')

def run_phobius(INPUT, OUTPUT):
    results = subprocess.check_output([PHOBIUS_BIN, '-short', INPUT])
    results = results.decode("utf-8")
    results = results.splitlines()
    # The first line is:
    #    SEQENCE ID                     TM SP PREDICTION
    results = results[1:]

    tbl_file = OUTPUT + ".out"
    with open(tbl_file, "w") as output_F:
        output_F.write("ID\tTM\tSP\tPREDICTION\n")
        for line in results:
            items = line.split()
            output_F.write("\t".join(items) + "\n")


#def convert_gff(OUTPUT):
#    tbl_file = OUTPUT + ".out"
#    gff_file = OUTPUT + ".gff"
#
#    input = open(tbl_file, "r")
#    output = open(gff_file, "w")
#
#    output.write("##gff-version 3\n")
#
#    lines = input.readlines()
#    lines = lines[1:] # Remove header
#    for line in lines:
#        line = line.rstrip()
#        words = line.split()
#
#        SEQID      = words[0]
#        SOURCE     = "phobius"
#        TYPE       = "."
#        FROM       = "."
#        TO         = "."
#        SCORE      = "."
#        STRAND     = "."
#        PHASE      = "."
#
#        ADDITIONAL = [
#            "TM={}".format(words[1]),
#            "SP={}".format(words[2]),
#            "PREDICTION={}".format(words[3])
#        ]
#        ADDITIONAL = ";".join(ADDITIONAL)
#        string_gff = "\t".join([SEQID, SOURCE, TYPE, FROM, TO, SCORE, STRAND, PHASE, ADDITIONAL])
#        output.write(string_gff + "\n")

def convert_gff2(OUTPUT, REFGFF):
    tbl_file = OUTPUT + ".out"
    gff_file = OUTPUT + ".gff"

    input_tbl = open(tbl_file, "r")
    input_gff = open(REFGFF, "r")
    output = open(gff_file, "w")

    tbl_lines = input_tbl.readlines()
    tbl_lines = tbl_lines[1:] # Remove header

    gff_lines = input_gff.readlines()
    # If the first line is a comment
    if re.match("^##gff-version", gff_lines[0]):
        gff_lines = gff_lines[1:]

    if len(tbl_lines) != len(gff_lines):
        print("The GFF file does not have same number of records as the fasta input")
        sys.exit()


    # Refer the header
    # output_F.write("ID\tTM\tSP\tPREDICTION\n")

    output.write("##gff-version 3\n")

    for i in range(len(tbl_lines)):
        tbl_line = tbl_lines[i].rstrip()
        gff_line = gff_lines[i].rstrip()
        tbl_words = tbl_line.split()
        gff_words = gff_line.split()

        SEQID      = gff_words[0]
        SOURCE     = "phobius"
        TYPE       = gff_words[2]
        FROM       = gff_words[3]
        TO         = gff_words[4]
        SCORE      = gff_words[5]
        STRAND     = gff_words[6]
        PHASE      = gff_words[7]

        ADDITIONAL = [
            "ID={}".format(tbl_words[0]),
            "TM={}".format(tbl_words[1]),
            "SP={}".format(tbl_words[2]),
            "PREDICTION={}".format(tbl_words[3])
        ]

        ADDITIONAL = ";".join(ADDITIONAL)
        string_gff = "\t".join([SEQID, SOURCE, TYPE, FROM, TO, SCORE, STRAND, PHASE, ADDITIONAL])
        output.write(string_gff + "\n")


def parse_args():
    parser = argparse.ArgumentParser(description='Run phobius program')
    parser.add_argument('-i', '--input', required=True,
                        help='Path of a fasta file containing protein sequence')
    parser.add_argument('-r', '--gff', required=True,
                        help='A reference GFF file.')
    parser.add_argument('-o', '--output', required=True,
                        help='Prefix of output file')
    args = parser.parse_args()
    return args

def main():
    ## Parse args
    args = parse_args()
    INPUT = args.input
    OUTPUT = args.output
    REFGFF = args.gff

    if not os.path.isfile(PHOBIUS_BIN):
        print("Error: Phobius not found! Did you run `(cd dependencies; ./prepare_phobius.sh)` in the pipeline directory?")
        sys.exit()

    ## Run phobius program
    run_phobius(INPUT, OUTPUT)
    #convert_gff(OUTPUT)
    convert_gff2(OUTPUT, REFGFF)

if __name__ == "__main__":
    main()

